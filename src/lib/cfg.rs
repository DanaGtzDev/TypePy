use std::collections::HashMap;

pub fn cfg() -> HashMap<String, Vec<Vec<String>>> {
    let mut my_cfg: HashMap<String, Vec<Vec<String>>> = HashMap::new();
    my_cfg.insert(
        "@expression".to_string(),
        vec![
            vec!["@variable_declaration".to_string()],
            vec!["@control_structure".to_string()],
            vec!["@binary_expression".to_string()],
            vec!["@function".to_string()],
        ],
    );
    my_cfg.insert(
        "@variable".to_string(),
        vec![
            vec!["IDENTIFIER".to_string()],
            vec!["@literal".to_string()],
            vec![
                "PUNCTUATOR_OPENING_PARENTHESIS".to_string(),
                "@binary_expression".to_string(),
                "PUNCTUATOR_CLOSING_PARENTHESIS".to_string(),
            ],
        ],
    );
    my_cfg.insert(
        "@control_structure".to_string(),
        vec![vec![
            "@control".to_string(),
            "@expression".to_string(),
            "HALT".to_string(),
        ]],
    );
    my_cfg.insert(
        "@variable_literal".to_string(),
        vec![
            vec!["@literal".to_string()],
            vec!["@binary_expression".to_string()],
            vec!["@function".to_string()],
        ],
    );
    my_cfg.insert(
        "@literal".to_string(),
        vec![
            vec!["LITERAL_INT".to_string()],
            vec!["LITERAL_STRING".to_string()],
            vec!["LITERAL_BOOL".to_string()],
            vec!["LITERAL_FLOAT".to_string()],
        ],
    );
    my_cfg.insert(
        "@variable_declaration".to_string(),
        vec![
            vec![
                "IDENTIFIER".to_string(),
                "PUNCTUATOR_DOTDOT".to_string(),
                "TYPE".to_string(),
                "PUNCTUATOR_EQUAL".to_string(),
                "@variable_literal".to_string(),
            ],
            vec![
                "IDENTIFIER".to_string(),
                "PUNCTUATOR_DOTDOT".to_string(),
                "PUNCTUATOR_OPENING_SQUARE_BRACE".to_string(),
                "TYPE".to_string(),
                "PUNCTUATOR_CLOSING_SQUARE_BRACE".to_string(),
                "PUNCTUATOR_EQUAL".to_string(),
                "PUNCTUATOR_OPENING_SQUARE_BRACE".to_string(),
                "@vector".to_string(),
                "PUNCTUATOR_CLOSING_SQUARE_BRACE".to_string(),
            ],
        ],
    );
    my_cfg.insert(
        "@binary_expression".to_string(),
        vec![vec![
            "@variable".to_string(),
            "OPERATOR".to_string(),
            "@variable".to_string(),
        ]],
    );
    my_cfg.insert(
        "@function".to_string(),
        vec![vec![
            "IDENTIFIER".to_string(),
            "PUNCTUATOR_OPENING_PARENTHESIS".to_string(),
            "@vector".to_string(),
            "PUNCTUATOR_CLOSING_PARENTHESIS".to_string(),
        ]],
    );
    my_cfg.insert(
        "@vector".to_string(),
        vec![vec!["@variable".to_string()], vec!["@vector".to_string()]],
    );
    my_cfg.insert(
        "@control".to_string(),
        vec![vec![
            "CONTROL".to_string(),
            "PUNCTUATOR_OPENING_PARENTHESIS".to_string(),
            "@binary_expression".to_string(),
            "PUNCTUATOR_CLOSING_PARENTHESIS".to_string(),
            "PUNCTUATOR_DOTDOT".to_string(),
        ]],
    );

    my_cfg
}
